{
	"info": {
		"_postman_id": "509ca827-440d-4e7e-b8e4-0c62c53a08bf",
		"name": "Api-Gestao Funcionarios",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "93352"
	},
	"item": [
		{
			"name": "Pegar subordinados",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Content-Type header is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Data array structure is valid\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.data).to.be.an('array');",
							"  responseData.data.forEach(function(employee) {",
							"    pm.expect(employee).to.have.property('id').that.is.a('number');",
							"    pm.expect(employee).to.have.property('firstName').that.is.a('string');",
							"    pm.expect(employee).to.have.property('lastName').that.is.a('string');",
							"    pm.expect(employee).to.have.property('email').that.is.a('string');",
							"    pm.expect(employee).to.have.property('documentNumber').that.is.a('string');",
							"    pm.expect(employee.phones).to.be.an('array');",
							"    employee.phones.forEach(function(phone) {",
							"      pm.expect(phone).to.have.property('id').that.is.a('number');",
							"      pm.expect(phone).to.have.property('number').that.is.a('string');",
							"      pm.expect(phone).to.have.property('type').that.is.a('string');",
							"    });",
							"    pm.expect(employee).to.have.property('birthDate').that.is.a('string');",
							"    pm.expect(employee).to.have.property('role').that.is.a('string');",
							"    pm.expect(employee).to.have.property('createdAt').that.is.a('string');",
							"  });",
							"});",
							"",
							"",
							"pm.test(\"Phones array is present in each 'data' object and contains expected number of elements\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData.data).to.be.an('array');",
							"    responseData.data.forEach(function (employee) {",
							"        pm.expect(employee.phones).to.be.an('array').and.to.have.lengthOf.at.least(1);",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Validate presence and non-emptiness of specific fields in each data object\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.data).to.be.an('array').that.is.not.empty;",
							"",
							"    responseData.data.forEach(function(employee) {",
							"        pm.expect(employee).to.include.all.keys('id', 'firstName', 'lastName', 'email', 'documentNumber', 'birthDate', 'role', 'createdAt');",
							"        pm.expect(employee.id).to.be.a('number');",
							"        pm.expect(employee.firstName).to.be.a('string').and.to.not.be.empty;",
							"        pm.expect(employee.lastName).to.be.a('string').and.to.not.be.empty;",
							"        pm.expect(employee.email).to.be.a('string').and.to.not.be.empty;",
							"        pm.expect(employee.documentNumber).to.be.a('string').and.to.not.be.empty;",
							"        pm.expect(employee.birthDate).to.be.a('string').and.to.not.be.empty;",
							"        pm.expect(employee.role).to.be.a('string').and.to.not.be.empty;",
							"        pm.expect(employee.createdAt).to.be.a('string').and.to.not.be.empty;",
							"    });",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "jwt",
					"jwt": [
						{
							"key": "algorithm",
							"value": "HS256",
							"type": "string"
						},
						{
							"key": "isSecretBase64Encoded",
							"value": false,
							"type": "boolean"
						},
						{
							"key": "payload",
							"value": "{}",
							"type": "string"
						},
						{
							"key": "addTokenTo",
							"value": "header",
							"type": "string"
						},
						{
							"key": "headerPrefix",
							"value": "Bearer",
							"type": "string"
						},
						{
							"key": "queryParamKey",
							"value": "token",
							"type": "string"
						},
						{
							"key": "header",
							"value": "{}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxIiwiZW1haWwiOiJ0ZXN0ZUB0ZXN0ZS5jb20iLCJyb2xlIjoiRGlyZWN0b3IiLCJqdGkiOiJkOWZmMzQ4NS0xMDE3LTQzNjAtYjgyMy04MDE2ZmYxMzAzNmIiLCJleHAiOjE3NDYzMjM5NTgsImlzcyI6IkVtcGxveWVlQVBJIiwiYXVkIjoiRW1wbG95ZWVBUElDbGllbnRzIn0.PqpexjjZcU2_WLX7TNmSh7pTkyCycWf8CVl3aTlkw-c",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"firstName\": \"primeiro nome\",\n  \"lastName\": \"sobrenome\",\n  \"email\": \"novo@example.com\",\n  \"documentNumber\": \"65465964565\",\n  \"phones\": [\n    {\n      \"number\": \"1999848596\",\n      \"type\": \"celular\"\n    }\n  ],\n  \"managerId\": 1,\n  \"password\": \"Senha21_tPkk\",\n  \"birthDate\": \"2001-05-03\",\n  \"role\": 1\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:5057/api/v1/employees/subordinados/2",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5057",
					"path": [
						"api",
						"v1",
						"employees",
						"subordinados",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "Criar funcionario",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 400\", function () {",
							"  pm.expect(pm.response.code).to.equal(400);",
							"});",
							"",
							"",
							"pm.test(\"Response has the Content-Type header set to application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Errors array is present in the response\", function () {",
							"  const responseData = pm.response.json();",
							"  pm.expect(responseData).to.have.property(\"errors\").that.is.an('array');",
							"});",
							"",
							"",
							"pm.test(\"Errors array must contain at least one element\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.errors).to.be.an('array').that.is.not.empty;",
							"});",
							"",
							"",
							"pm.test(\"Errors array elements are non-empty strings\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.errors).to.be.an('array').that.is.not.empty;",
							"    responseData.errors.forEach(function(error) {",
							"        pm.expect(error).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Error should not be empty\");",
							"    });",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "jwt",
					"jwt": [
						{
							"key": "algorithm",
							"value": "HS256",
							"type": "string"
						},
						{
							"key": "isSecretBase64Encoded",
							"value": false,
							"type": "boolean"
						},
						{
							"key": "payload",
							"value": "{}",
							"type": "string"
						},
						{
							"key": "addTokenTo",
							"value": "header",
							"type": "string"
						},
						{
							"key": "headerPrefix",
							"value": "Bearer",
							"type": "string"
						},
						{
							"key": "queryParamKey",
							"value": "token",
							"type": "string"
						},
						{
							"key": "header",
							"value": "{}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxIiwiZW1haWwiOiJ0ZXN0ZUB0ZXN0ZS5jb20iLCJyb2xlIjoiRGlyZWN0b3IiLCJqdGkiOiJkOWZmMzQ4NS0xMDE3LTQzNjAtYjgyMy04MDE2ZmYxMzAzNmIiLCJleHAiOjE3NDYzMjM5NTgsImlzcyI6IkVtcGxveWVlQVBJIiwiYXVkIjoiRW1wbG95ZWVBUElDbGllbnRzIn0.PqpexjjZcU2_WLX7TNmSh7pTkyCycWf8CVl3aTlkw-c",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"firstName\": \"primeiro nome\",\n  \"lastName\": \"sobrenome\",\n  \"email\": \"novo@example.com\",\n  \"documentNumber\": \"65465964565\",\n  \"phones\": [\n    {\n      \"number\": \"1999848596\",\n      \"type\": \"celular\"\n    }\n  ],\n  \"managerId\": 1,\n  \"password\": \"Senha21_tPkk\",\n  \"birthDate\": \"2001-05-03\",\n  \"role\": 1\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:5057/api/v1/employees",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5057",
					"path": [
						"api",
						"v1",
						"employees"
					]
				}
			},
			"response": []
		},
		{
			"name": "Remover funcionario",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 400\", function () {",
							"    pm.expect(pm.response.code).to.equal(400);",
							"});",
							"",
							"",
							"pm.test(\"Content type is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Errors array is present in the response\", function () {",
							"  const responseData = pm.response.json();",
							"",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.errors).to.exist.and.to.be.an('array');",
							"});",
							"",
							"",
							"pm.test(\"Errors array must contain at least one element\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.errors).to.be.an('array').that.is.not.empty;",
							"});",
							"",
							"",
							"pm.test(\"Validate the format of the error message within the 'errors' array\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.errors).to.be.an('array');",
							"    responseData.errors.forEach(function(error) {",
							"        pm.expect(error).to.be.a('string');",
							"    });",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "jwt",
					"jwt": [
						{
							"key": "algorithm",
							"value": "HS256",
							"type": "string"
						},
						{
							"key": "isSecretBase64Encoded",
							"value": false,
							"type": "boolean"
						},
						{
							"key": "payload",
							"value": "{}",
							"type": "string"
						},
						{
							"key": "addTokenTo",
							"value": "header",
							"type": "string"
						},
						{
							"key": "headerPrefix",
							"value": "Bearer",
							"type": "string"
						},
						{
							"key": "queryParamKey",
							"value": "token",
							"type": "string"
						},
						{
							"key": "header",
							"value": "{}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxIiwiZW1haWwiOiJ0ZXN0ZUB0ZXN0ZS5jb20iLCJyb2xlIjoiRGlyZWN0b3IiLCJqdGkiOiJkOWZmMzQ4NS0xMDE3LTQzNjAtYjgyMy04MDE2ZmYxMzAzNmIiLCJleHAiOjE3NDYzMjM5NTgsImlzcyI6IkVtcGxveWVlQVBJIiwiYXVkIjoiRW1wbG95ZWVBUElDbGllbnRzIn0.PqpexjjZcU2_WLX7TNmSh7pTkyCycWf8CVl3aTlkw-c",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:5057/api/v1/employees/7",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5057",
					"path": [
						"api",
						"v1",
						"employees",
						"7"
					]
				}
			},
			"response": []
		},
		{
			"name": "Detalhar funcionario",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Content type is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Validate the data object\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.data).to.exist.and.to.be.an('object');",
							"    pm.expect(responseData.data.id).to.exist.and.to.be.a('number');",
							"    pm.expect(responseData.data.firstName).to.exist.and.to.be.a('string');",
							"    pm.expect(responseData.data.lastName).to.exist.and.to.be.a('string');",
							"    pm.expect(responseData.data.email).to.exist.and.to.be.a('string');",
							"    pm.expect(responseData.data.documentNumber).to.exist.and.to.be.a('string');",
							"    pm.expect(responseData.data.phones).to.exist.and.to.be.an('array');",
							"    pm.expect(responseData.data.birthDate).to.exist.and.to.be.a('string');",
							"    pm.expect(responseData.data.role).to.exist.and.to.be.a('string');",
							"    pm.expect(responseData.data.createdAt).to.exist.and.to.be.a('string');",
							"});",
							"",
							"",
							"pm.test(\"Email is in a valid format\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.have.property('data');",
							"    pm.expect(responseData.data.email).to.be.a('string').and.to.match(/^.+@.+\\..+$/);",
							"});",
							"",
							"",
							"pm.test(\"BirthDate is a valid date format\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.data).to.be.an('object');",
							"    pm.expect(responseData.data.birthDate).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "jwt",
					"jwt": [
						{
							"key": "algorithm",
							"value": "HS256",
							"type": "string"
						},
						{
							"key": "isSecretBase64Encoded",
							"value": false,
							"type": "boolean"
						},
						{
							"key": "payload",
							"value": "{}",
							"type": "string"
						},
						{
							"key": "addTokenTo",
							"value": "header",
							"type": "string"
						},
						{
							"key": "headerPrefix",
							"value": "Bearer",
							"type": "string"
						},
						{
							"key": "queryParamKey",
							"value": "token",
							"type": "string"
						},
						{
							"key": "header",
							"value": "{}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxIiwiZW1haWwiOiJ0ZXN0ZUB0ZXN0ZS5jb20iLCJyb2xlIjoiRGlyZWN0b3IiLCJqdGkiOiJkOWZmMzQ4NS0xMDE3LTQzNjAtYjgyMy04MDE2ZmYxMzAzNmIiLCJleHAiOjE3NDYzMjM5NTgsImlzcyI6IkVtcGxveWVlQVBJIiwiYXVkIjoiRW1wbG95ZWVBUElDbGllbnRzIn0.PqpexjjZcU2_WLX7TNmSh7pTkyCycWf8CVl3aTlkw-c",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:5057/api/v1/employees/4",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5057",
					"path": [
						"api",
						"v1",
						"employees",
						"4"
					]
				}
			},
			"response": []
		},
		{
			"name": "Listar funcionarios",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Content-Type header is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Data array and its elements are valid\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.data).to.be.an('array').that.is.not.empty;",
							"  ",
							"  responseData.data.forEach(function(employee) {",
							"    pm.expect(employee).to.have.property('id').that.is.a('number');",
							"    pm.expect(employee).to.have.property('firstName').that.is.a('string');",
							"    pm.expect(employee).to.have.property('lastName').that.is.a('string');",
							"    pm.expect(employee).to.have.property('email').that.is.a('string');",
							"    pm.expect(employee).to.have.property('documentNumber').that.is.a('string');",
							"    pm.expect(employee.phones).to.be.an('array').that.is.not.empty;",
							"    ",
							"    employee.phones.forEach(function(phone) {",
							"      pm.expect(phone).to.have.property('id').that.is.a('number');",
							"      pm.expect(phone).to.have.property('number').that.is.a('string');",
							"      pm.expect(phone).to.have.property('type').that.is.a('string');",
							"    });",
							"    ",
							"    pm.expect(employee).to.have.property('birthDate').that.is.a('string');",
							"    pm.expect(employee).to.have.property('role').that.is.a('string');",
							"    pm.expect(employee).to.have.property('createdAt').that.is.a('string');",
							"  });",
							"});",
							"",
							"",
							"pm.test(\"Verify the phones array and its elements\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.data).to.be.an('array');",
							"    pm.expect(responseData.data).to.have.lengthOf.at.least(1, \"Array should not be empty\");",
							"",
							"    responseData.data.forEach(function(employee) {",
							"        pm.expect(employee.phones).to.be.an('array');",
							"        employee.phones.forEach(function(phone) {",
							"            pm.expect(phone).to.be.an('object');",
							"            pm.expect(phone.id).to.be.a('number');",
							"            pm.expect(phone.number).to.be.a('string');",
							"            pm.expect(phone.type).to.be.a('string');",
							"        });",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"BirthDate is in a valid date format\", function () {",
							"  const responseData = pm.response.json();",
							"",
							"  pm.expect(responseData.data).to.be.an('array');",
							"  responseData.data.forEach(function(employee) {",
							"    pm.expect(employee.birthDate).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);",
							"  });",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "jwt",
					"jwt": [
						{
							"key": "algorithm",
							"value": "HS256",
							"type": "string"
						},
						{
							"key": "isSecretBase64Encoded",
							"value": false,
							"type": "boolean"
						},
						{
							"key": "payload",
							"value": "{}",
							"type": "string"
						},
						{
							"key": "addTokenTo",
							"value": "header",
							"type": "string"
						},
						{
							"key": "headerPrefix",
							"value": "Bearer",
							"type": "string"
						},
						{
							"key": "queryParamKey",
							"value": "token",
							"type": "string"
						},
						{
							"key": "header",
							"value": "{}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxIiwiZW1haWwiOiJ0ZXN0ZUB0ZXN0ZS5jb20iLCJyb2xlIjoiRGlyZWN0b3IiLCJqdGkiOiJkOWZmMzQ4NS0xMDE3LTQzNjAtYjgyMy04MDE2ZmYxMzAzNmIiLCJleHAiOjE3NDYzMjM5NTgsImlzcyI6IkVtcGxveWVlQVBJIiwiYXVkIjoiRW1wbG95ZWVBUElDbGllbnRzIn0.PqpexjjZcU2_WLX7TNmSh7pTkyCycWf8CVl3aTlkw-c",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"email\": \"teste@teste.com\",\n  \"password\": \"q1w2e3r4\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:5057/api/v1/employees",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5057",
					"path": [
						"api",
						"v1",
						"employees"
					]
				}
			},
			"response": []
		},
		{
			"name": "login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Content-Type header is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Success field should be true\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.success).to.be.true;",
							"});",
							"",
							"",
							"pm.test(\"Token is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.token).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Token should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Validate the employee object and its nested fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.employee).to.exist.and.to.be.an('object');",
							"    pm.expect(responseData.employee.id).to.exist.and.to.be.a('number');",
							"    pm.expect(responseData.employee.firstName).to.exist.and.to.be.a('string');",
							"    pm.expect(responseData.employee.lastName).to.exist.and.to.be.a('string');",
							"    pm.expect(responseData.employee.email).to.exist.and.to.be.a('string');",
							"    pm.expect(responseData.employee.documentNumber).to.exist.and.to.be.a('string');",
							"    pm.expect(responseData.employee.phones).to.exist.and.to.be.an('array');",
							"    responseData.employee.phones.forEach(function(phone) {",
							"        pm.expect(phone.id).to.exist.and.to.be.a('number');",
							"        pm.expect(phone.number).to.exist.and.to.be.a('string');",
							"        pm.expect(phone.type).to.exist.and.to.be.a('string');",
							"    });",
							"    pm.expect(responseData.employee.birthDate).to.exist.and.to.be.a('string');",
							"    pm.expect(responseData.employee.role).to.exist.and.to.be.a('string');",
							"    pm.expect(responseData.employee.createdAt).to.exist.and.to.be.a('string');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "jwt",
					"jwt": [
						{
							"key": "algorithm",
							"value": "HS256",
							"type": "string"
						},
						{
							"key": "isSecretBase64Encoded",
							"value": false,
							"type": "boolean"
						},
						{
							"key": "payload",
							"value": "{}",
							"type": "string"
						},
						{
							"key": "addTokenTo",
							"value": "header",
							"type": "string"
						},
						{
							"key": "headerPrefix",
							"value": "Bearer",
							"type": "string"
						},
						{
							"key": "queryParamKey",
							"value": "token",
							"type": "string"
						},
						{
							"key": "header",
							"value": "{}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxIiwiZW1haWwiOiJ0ZXN0ZUB0ZXN0ZS5jb20iLCJyb2xlIjoiRGlyZWN0b3IiLCJqdGkiOiJkOWZmMzQ4NS0xMDE3LTQzNjAtYjgyMy04MDE2ZmYxMzAzNmIiLCJleHAiOjE3NDYzMjM5NTgsImlzcyI6IkVtcGxveWVlQVBJIiwiYXVkIjoiRW1wbG95ZWVBUElDbGllbnRzIn0.PqpexjjZcU2_WLX7TNmSh7pTkyCycWf8CVl3aTlkw-c",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"email\": \"teste@teste.com\",\n  \"password\": \"q1w2e3r4\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:5057/api/v1/auth/login",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5057",
					"path": [
						"api",
						"v1",
						"auth",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Atualisar funcionario",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Content-Type header is application/json\", function () {",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
							"});",
							"",
							"",
							"pm.test(\"Validate the data object\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.data).to.exist.and.to.be.an('object');",
							"    pm.expect(responseData.data.id).to.exist.and.to.be.a('number');",
							"    pm.expect(responseData.data.firstName).to.exist.and.to.be.a('string');",
							"    pm.expect(responseData.data.lastName).to.exist.and.to.be.a('string');",
							"    pm.expect(responseData.data.email).to.exist.and.to.be.a('string');",
							"    pm.expect(responseData.data.documentNumber).to.exist.and.to.be.a('string');",
							"    pm.expect(responseData.data.phones).to.exist.and.to.be.an('array');",
							"    responseData.data.phones.forEach(function(phone) {",
							"        pm.expect(phone.id).to.exist.and.to.be.a('number');",
							"        pm.expect(phone.number).to.exist.and.to.be.a('string');",
							"        pm.expect(phone.type).to.exist.and.to.be.a('string');",
							"    });",
							"    pm.expect(responseData.data.managerId).to.exist.and.to.be.a('number');",
							"    pm.expect(responseData.data.managerName).to.exist.and.to.be.a('string');",
							"    pm.expect(responseData.data.birthDate).to.exist.and.to.be.a('string');",
							"    pm.expect(responseData.data.role).to.exist.and.to.be.a('string');",
							"    pm.expect(responseData.data.createdAt).to.exist.and.to.be.a('string');",
							"    pm.expect(responseData.data.updatedAt).to.exist.and.to.be.a('string');",
							"});",
							"",
							"",
							"pm.test(\"Email is in a valid format\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.data.email).to.be.a('string').and.to.match(/^.+@.+\\..+$/);",
							"});",
							"",
							"",
							"pm.test(\"Phones array is present and contains expected number of elements\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.data.phones).to.exist;",
							"  pm.expect(responseData.data.phones).to.be.an('array');",
							"  pm.expect(responseData.data.phones).to.have.lengthOf(1);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "jwt",
					"jwt": [
						{
							"key": "algorithm",
							"value": "HS256",
							"type": "string"
						},
						{
							"key": "isSecretBase64Encoded",
							"value": false,
							"type": "boolean"
						},
						{
							"key": "payload",
							"value": "{}",
							"type": "string"
						},
						{
							"key": "addTokenTo",
							"value": "header",
							"type": "string"
						},
						{
							"key": "headerPrefix",
							"value": "Bearer",
							"type": "string"
						},
						{
							"key": "queryParamKey",
							"value": "token",
							"type": "string"
						},
						{
							"key": "header",
							"value": "{}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxIiwiZW1haWwiOiJ0ZXN0ZUB0ZXN0ZS5jb20iLCJyb2xlIjoiRGlyZWN0b3IiLCJqdGkiOiJkOWZmMzQ4NS0xMDE3LTQzNjAtYjgyMy04MDE2ZmYxMzAzNmIiLCJleHAiOjE3NDYzMjM5NTgsImlzcyI6IkVtcGxveWVlQVBJIiwiYXVkIjoiRW1wbG95ZWVBUElDbGllbnRzIn0.PqpexjjZcU2_WLX7TNmSh7pTkyCycWf8CVl3aTlkw-c",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\n            \"firstName\": \"primeiro nome\",\n            \"lastName\": \"sobrenome\",\n            \"email\": \"novo@example.com\",\n            \"documentNumber\": \"65465964565\",\n            \"phones\": [\n                {\n         \n                    \"number\": \"1999848596\",\n                    \"type\": \"celular\"\n                }\n            ],\n            \"managerId\": 1,\n            \"managerName\": \"Admin System\",\n            \"birthDate\": \"2001-05-03T00:00:00\",\n            \"role\": 2\n    \n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:5057/api/v1/employees/11",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5057",
					"path": [
						"api",
						"v1",
						"employees",
						"11"
					]
				}
			},
			"response": []
		}
	]
}